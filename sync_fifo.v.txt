module sync_fifo #(
   parameter data_width =8,
   parameter fifo_depth=8,
   parameter addr_width=3) (
   input clk,rst,wr_en,rd_en,
   input [(data_width -1):0]datain,
   output empty,full,
   output reg rd_vd,
   output reg [(data_width-1):0]dataout);

      reg [addr_width :0] wr_ptr,rd_ptr;
      reg[(data_width -1):0]mem[0:(fifo_depth-1)];
      integer i;
      always @(posedge clk, posedge rst)
      if (rst)begin
         wr_ptr<='d0;
         for(i=0;i<fifo_depth;i=i+1)
         mem[i]<='d0;
      end else if((!full)&&wr_en)begin
         mem[wr_ptr[(addr_width-1):0]]<=datain;
         wr_ptr<=wr_ptr+1'b1;
      end

      always @(posedge clk,posedge rst)
      if(rst)begin
         rd_ptr<='d0;
         rd_vd<=0;
         dataout<='d0;
      end else if ((!empty)&&rd_en)begin
         dataout<=mem[rd_ptr[(addr_width-1):0]];
         rd_ptr<=rd_ptr+1'b1;
         rd_vd<=1'b1;
      end else begin
         rd_vd<=0;
         dataout<='d0;
      end
      assign empty = ((wr_ptr-rd_ptr)=='d0)?1'b1:1'b0;
      assign full = ((wr_ptr - rd_ptr)==fifo_depth)?1'b1:1'b0;

endmodule